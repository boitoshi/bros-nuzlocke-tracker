# PostgreSQL. Versions 9.3 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On macOS with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem "pg"
#
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see Rails configuration guide
  # https://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>


development:
  <<: *default
  database: bros_nuzlocke_tracker_development
  # 開発環境でのローカル接続設定
  host: localhost
  port: 5432
  username: <%= ENV.fetch("POSTGRES_USER") { "postgres" } %>
  password: <%= ENV.fetch("POSTGRES_PASSWORD") { "" } %>

  # Schema search path. The server defaults to $user,public
  #schema_search_path: myapp,sharedapp,public

  # Minimum log levels, in increasing order:
  #   debug5, debug4, debug3, debug2, debug1,
  #   log, notice, warning, error, fatal, and panic
  # Defaults to warning.
  #min_messages: notice

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: bros_nuzlocke_tracker_test
  # テスト環境でのローカル接続設定
  host: localhost
  port: 5432
  username: <%= ENV.fetch("POSTGRES_USER") { "postgres" } %>
  password: <%= ENV.fetch("POSTGRES_PASSWORD") { "" } %>

# As with config/credentials.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password or a full connection URL as an environment
# variable when you boot the app. For example:
#
#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# If the connection URL is provided in the special DATABASE_URL environment
# variable, Rails will automatically merge its configuration values on top of
# the values provided in this file. Alternatively, you can specify a connection
# URL environment variable explicitly:
#
#   production:
#     url: <%= ENV["MY_APP_DATABASE_URL"] %>
#
# Read https://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full overview on how database connection configuration can be specified.
#
production:
  adapter: postgresql
  encoding: unicode
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  # RenderではDATABASE_URLが必須（TCP接続）
  <% if ENV["DATABASE_URL"].present? %>
  url: <%= ENV["DATABASE_URL"] %>
  <% else %>
  # フォールバック設定（本来はDATABASE_URLが設定されるはず）
  host: <%= ENV["DATABASE_HOST"] || "localhost" %>
  port: <%= ENV["DATABASE_PORT"] || 5432 %>
  database: <%= ENV["DATABASE_NAME"] || "bros_nuzlocke_tracker_production" %>
  username: <%= ENV["DATABASE_USER"] || "bros_nuzlocke_tracker" %>
  password: <%= ENV["DATABASE_PASSWORD"] || "" %>
  <% end %>
  # Renderのマネージドデータベース用設定
  connect_timeout: 30
  read_timeout: 30
  write_timeout: 30
  # TCP接続を強制（Unixソケット接続を防ぐ）
  host: <%= ENV["DATABASE_HOST"] unless ENV["DATABASE_URL"].present? %>
  port: <%= ENV["DATABASE_PORT"] || 5432 unless ENV["DATABASE_URL"].present? %>
